#8장. 스프링이랑 무엇인가?
---

## 요약 및 결론
> 
    
## 책 내용
> 스프

### 1. 스프링의 정의
```
스프링을 짧게 설명하는 것은 쉽지 않고 짧은 설명으로 충분하지도 않다.
가장 잘 알려진 정의
-> 자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크
```
- 애플리케이션 프레임워크
    - 특정 계층, 기술, 업무 분야에 국한되지 않고 애플리케이션 전 영역을 포괄하는 범용적인 프레임워크
    - 스프링은 처음부터 독자적인 프레임워크로 개발된 것이 아니다.(로드 존슨 책에서 프레임워크)
- 경량급 : 불필요하게 무겁지 않다는 의미
- 자바 엔터프라이즈 개발을 편하게
    - 편리한 애플리케이션 개발? 개발자가 복잡하고 실수하기 쉬운 로우레벨 기술에 많은 신경을 안쓰면서 비즈니스 로직을 빠르고 효과적으로 구현하는 것
    - EJB는 고민과 부담을 덜어주었지만 이 과정에서 다른 차원의 더 큰 복잡함을 끌고들어왔다.
- 오픈소스
    - 언제 지원이 중단될지 알 수 없는 오픈소스의 단점을 극복하기 위해 전문기업을 만들었다.
    - VMWare에서 스프링소스를 인수(현재 스프링은 VMWare 산하 Pivotal에서 운영)
### 2. 스프링의 목적
```
스프링을 더 잘 사용하기 위해 스프링의 개발 철학과 궁극적인 목표를 알아보자
 - 엔터프라이즈 개발이 복잡했고 문제는 무엇이였나?
 - 어떻게 해결하고자 했었는가?
 - 스프링은 어떻게 했었나?
```
1. 엔터프라이즈 개발의 복잡함
    - 복잡함의 근본적인 이유
        - 기술적인 제약조건과 요구사항이 늘어갔기 때문
            - 비즈니스로직 구현 외 기술적으로 고려할 사항이 많아졌다.
        - 비즈니스 로직 자체의 복잡도가 높아졌다.
            - 시간이 지날 수록 엔터프라이즈 시스템이 기업의 핵심업무 처리를 담당하는 비중이 늘어갔다.
            - 많은 업계에서 변화가 빠르게 일어나며 기능 요구사항과 업무 정책등이 바뀌기 때문에 애플리케이션을 자주 수정해야했다. 
    - 복잡함을 가중시키는 원인
        - 세부 요소가 이해하기 힘든 방식으로 얽혀있어서 유지보수하기 힘들었다.
        - 전통적인 JavaEE 개발 기법은 비즈니스 로직의 복잡한 구현 코드와 기술적인 코드가 혼재될 수 밖에 없는 방식이였다.
2. 복잡함을 해결하려는 도전
    - 제거될 수 없는 근본적인 복잡함
        - 비즈니스 로직의 적용범위를 줄이고 기술적인 요구조건을 일부 생략하는 것은 해결 방법이 아니다.
        - 비즈니스 로직의 복잡함과 기술적인 복잡함은 처리하는 방법이 다르다.
        - 둘을 분리해내야 변화에 잘 대응할 수 있다.
    - 실패한 해결책: EJB
        - EJB의 기본 전략도 위 2 종류의 복잡함을 분리하는 것이었다.
        - 기술적인 복잡함을 덜어주려다 더 큰 복잡함을 추가해버렸다.
        - 발전 주기도 너무 느려서 엔터프라이즈 개발 기술의 발전을 따라잡지 못하는 것도 문제점이다.
    - 비침투적인 방식을 통한 효과적인 해결책: 스프링
        - EJB의 실패를 교훈으로 삼아서 출발했다.
        - 침투적(invasive)인 기술 : 기술과 관련된 코드나 규약 등이 애플리케이션 코드 여기저기에 불쑥 등장하는 기술
3. 복잡함을 상대하는 스프링의 전략
    - 기술적 복잡함을 상대하는 전략
        - 문제1. 기술에 대한 접근 방식이 일관성이 없고, 특정 환경에 종속적이다.
            - 애플리케이션 환경에 따라 코드가 바뀌어야 한다면 심각한 문제다.
            - 스프링의 전략은 서비스추상화
        - 문제2. 기술적인 처리를 담당하는 코드가 성격이 다른 코드에 섞여서 등장한다.
            - 기술과 비즈니스 로직의 혼재로 발생하는 복잡함(트랜잭션, 보안, 로깅이나 감사 등)
            - 스프링의 전략은 AOP
    - 비즈니스와 애플리케이션 로직의 복잡함을 상대하는 전략
    - 핵심 도구: 객체지향과 DI
### 3. POJO 프로그래밍
1. 스프링의 핵심: POJO
2. POJO란 무엇인가?
3. POJO의 조건
    - 특정 규약에 종속되지 않는다.
    - 특정 환경에 종속되지 않는다.
4. POJO의 장점
5. POJO 프레임워크
### 4. 스프링의 기술
1. 제어의 역전(IoC) / 의존관계 주입(DI)
    - DI 활용 방법
        - 핵심 기능의 변경
        - 핵심 기능의 동적인 변경
        - 부가기능의 추가
        - 인터페이스의 변경
        - 프록시
        - 템플릿과 콜백
        - 싱글톤과 오브젝트 스코프
        - 테스트
2. 애스펙트 지향 프로그래밍(AOP)
    - AOP 적용 기법
        - 기법1. 스프링과 같이 다이내믹 프록시를 사용하는 방법
        - 기법2. 자바언어의 한계를 넘어서는 언어의 확장을 이용하는 방법(AspectJ)
    - AOP의 적용 단계
        - 단계1. 미리 준비된 AOP 이용
        - 단계2. 전담팀을 통한 정책 AOP 적용
        - 단계3. AOP의 자유로운 이용
3. 포터블 서비스 추상화(PSA)

### 7. 정리
- 스

<details markdown="1">
<summary>코드 접기/펼치기</summary>
<pre>
</pre>
</details>